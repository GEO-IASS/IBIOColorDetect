function c_PoirsonAndWandell96RunSession()

    nTrainingSamples = 512;
    
    c_PoirsonAndWandell96Replicate(...
        'spatialFrequency', 10, ...
        'meanLuminance', 200, ...
        'nTrainingSamples', nTrainingSamples, ...
        'computeResponses', true, ...
        'emPathType', 'random', ...
        'visualizeResponses', false, ...
        'findPerformance', false);
    
    c_PoirsonAndWandell96Replicate(...
        'spatialFrequency', 10, ...
        'meanLuminance', 200, ...
        'nTrainingSamples', nTrainingSamples, ...
        'computeResponses', true, ...
        'emPathType', 'frozen', ...
        'visualizeResponses', false, ...
        'findPerformance', false);
    
    
    c_PoirsonAndWandell96Replicate(...
        'spatialFrequency', 10, ...
        'meanLuminance', 200, ...
        'nTrainingSamples', nTrainingSamples, ...
        'computeResponses', true, ...
        'emPathType', 'none', ...
        'visualizeResponses', false, ...
        'findPerformance', false);
    
    
    c_PoirsonAndWandell96Replicate(...
        'spatialFrequency', 4, ...
        'meanLuminance', 20, ...
        'nTrainingSamples', nTrainingSamples, ...
        'computeResponses', true, ...
        'emPathType', 'random', ...
        'visualizeResponses', false, ...
        'findPerformance', false);
    
    c_PoirsonAndWandell96Replicate(...
        'spatialFrequency', 4, ...
        'meanLuminance', 20, ...
        'nTrainingSamples', nTrainingSamples, ...
        'computeResponses', true, ...
        'emPathType', 'frozen', ...
        'visualizeResponses', false, ...
        'findPerformance', false);
    
    
    c_PoirsonAndWandell96Replicate(...
        'spatialFrequency', 4, ...
        'meanLuminance', 20, ...
        'nTrainingSamples', nTrainingSamples, ...
        'computeResponses', true, ...
        'emPathType', 'none', ...
        'visualizeResponses', false, ...
        'findPerformance', false);
    
    
    return;
    
    switch (sessionIdentifier)
        case 'computeForRandomEMs'
            
            % Only compute responses for random eye movement paths, without visualizing them, 
            % and without examining performance
            c_PoirsonAndWandell96Replicate(...
                'nTrainingSamples', nTrainingSamples, 'emPathType', 'random', ...
                'computeResponses', true, ...
                'displayTrialBlockPartitionDiagnostics', true, 'visualizeResponses', false, ...
                'findPerformance', false);
            
        case 'computeForFrozenEMs'
            % Only compute responses for random eye movement paths, without visualizing them, 
            % and without examining performance
            c_PoirsonAndWandell96Replicate(...
                'nTrainingSamples', nTrainingSamples, 'emPathType', 'random', ...
                'computeResponses', true, ...
                'displayTrialBlockPartitionDiagnostics', true, 'visualizeResponses', false, ...
                'findPerformance', false);
            
            
    end
    
    if (ismember(2, sessionsToExecute))
        % Classify the above isomerization responses using the SVM classifier
        c_PoirsonAndWandell96Replicate(...
            'nTrainingSamples', nTrainingSamples, 'emPathType', 'random', ...
            'computeResponses', false, ...
            'displayTrialBlockPartitionDiagnostics', false, 'visualizeResponses', false, ...
            'performanceSignal', 'isomerizations', 'performanceClassifier', 'svm');
    end
    
    
    if (ismember(3, sessionsToExecute))
        % Classify the photocurrent responses using the SVM classifier
        c_PoirsonAndWandell96Replicate(...
            'nTrainingSamples', nTrainingSamples, 'emPathType', 'random', ...
            'computeResponses', false, ...
            'displayTrialBlockPartitionDiagnostics', false, 'visualizeResponses', false, ...
            'performanceSignal', 'photocurrents', 'performanceClassifier', 'mlpt');
    end
    
    
    if (ismember(4, sessionsToExecute))
        % NO EYE MOVEMENTS. NO photocurrent signals here
        % Compute isomerization responses for the static case, without visualizing them, 
        % and examine performance based using the MLPT classifier.
        c_PoirsonAndWandell96Replicate(...
            'nTrainingSamples', nTrainingSamples, 'emPathType', 'none', ...
            'computeResponses', true, ...
            'displayTrialBlockPartitionDiagnostics', true, 'visualizeResponses', false, ...
            'performanceSignal', 'isomerizations', 'performanceClassifier', 'mlpt');
    end
    
    if (ismember(5, sessionsToExecute))
        % Classify the above isomerization responses using the SVM classifier
        c_PoirsonAndWandell96Replicate(...
            'nTrainingSamples', nTrainingSamples, 'emPathType', 'none', ...
            'computeResponses', false, ...
            'displayTrialBlockPartitionDiagnostics', false, 'visualizeResponses', false, ...
            'performanceSignal', 'isomerizations', 'performanceClassifier', 'svm');
    end
    
    
end

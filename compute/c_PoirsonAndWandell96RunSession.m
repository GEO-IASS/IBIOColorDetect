function c_PoirsonAndWandell96RunSession()
% Conduct batch runs using the c_PoirsonAndWandel executive script
%
    % How many instances to generate
    nTrainingSamples = 512;
    
    % Freeze photon-isomerization & photocurrent noise
    freezeNoise = true;
    
    % Conditions to examine
    % Full set of conditions
    [emPathTypesList, stimParamsList, classifierSignalList, classifierTypeList] = assembleFullConditionsSet();
    
    % Or select a subset, such as:
    emPathTypesList = {'frozen0', 'random'};
    classifierSignalList = {'isomerizations', 'photocurrents'};
    classifierTypeList   = {'svm'};
    
    % Actions to perform
    computeResponses   = false;
    visualizeResponses = false;
    findPerformances   = true;
    visualizePerformances = true;
    
    % Go !
    batchJob(computeResponses, visualizeResponses, findPerformances, visualizePerformances, ...
        nTrainingSamples, freezeNoise,  emPathTypesList, stimParamsList, ...
        classifierSignalList, classifierTypeList);
    
    if (1==2)
        % Visualize some condition
        spatialFrequency = 2;
        meanLuminance = 200;
        emPathType = 'random';
        c_PoirsonAndWandell96Replicate(...
            'spatialFrequency', spatialFrequency, 'meanLuminance', meanLuminance, ...
            'nTrainingSamples', nTrainingSamples, 'emPathType', emPathType, ...
            'freezeNoise', freezeNoise, ...
            'computeResponses', false, 'visualizeResponses', true, ...
            'displayTrialBlockPartitionDiagnostics', false,  ...
            'findPerformance', false);
    end
    
    if (1==2)
        % Optionally, assess performance as a function of integrated response
        % Response integration times (in milliseconds) to examine
        evidenceIntegrationTimes = ([6 18 30 48 60 78 90 108 120 138 150 168 186 210]-1); % (5:10:250); %-([6 18 30 48 60 78 90 108 120 138 150 168 186 210]-1); % (5:10:250);

        % Stimulus & performance params to examine
        spatialFrequency = 2;
        meanLuminance = 200;
        emPathType = 'frozen0';
        classifier = 'mlpt';
        performanceSignal = 'isomerizations';
        
        findPerformancesForDifferentEvidenceIntegrationTimes(...
            spatialFrequency, meanLuminance, nTrainingSamples, ...
            emPathType, classifier, performanceSignal, ...
            evidenceIntegrationTimes);
    end
    
end


function batchJob(computeResponses, visualizeResponses, findPerformances, visualizePerformances, ...
        nTrainingSamples, freezeNoise, emPathTypesList, stimParamsList, classifierSignalList, classifierTypeList)

    % Start timing
    tBegin = clock;    
    
    for emPathTypeIndex = 1:numel(emPathTypesList)
        % Get the emPathType
        emPathType = emPathTypesList{emPathTypeIndex};
        
        for stimConditionIndex = 1:numel(stimParamsList)
            % Get the stim params
            params = stimParamsList{stimConditionIndex};
            
            % Compute responses
            if (computeResponses) || (visualizeResponses)
                 % Inform the user regarding what we are currently working on
                 fprintf('Computing/visualizing responses for %2.2f c/deg, %d cd/m2 with ''%s'' emPaths.\n', ...
                            params.spatialFrequency, params.meanLuminance, emPathType);
                        
                c_PoirsonAndWandell96Replicate(...
                    'spatialFrequency', params.spatialFrequency, ...
                    'meanLuminance', params.meanLuminance, ...
                    'nTrainingSamples', nTrainingSamples, ...
                    'emPathType', emPathType, ...
                    'freezeNoise', freezeNoise, ...
                    'computeResponses', computeResponses, ...
                    'visualizeResponses', visualizeResponses, ...
                    'findPerformance', false);
                
            end % if (computeResponses)
            
            % Find/visualize performance
            if (findPerformances) || (visualizePerformances)
                for classifierTypeIndex = 1:numel(classifierTypeList)
                    % Get the classifier name
                    classifierTypeName = classifierTypeList{classifierTypeIndex};
                    for classifierSignalIndex = 1:numel(classifierSignalList)
                        % Get the signal name on which to measure performance
                        performanceSignalName = classifierSignalList{classifierSignalIndex};
                        
                        % Inform the user regarding what we are currently working on
                        fprintf('Finding/visualizing performance for <strong>%2.2f c/deg, %d cd/m2</strong> with <strong>%s</strong> emPaths using an <strong>%s</strong> classifier operating on <strong>%s</strong>.\n', ...
                            params.spatialFrequency, params.meanLuminance, emPathType, classifierTypeName, performanceSignalName);
                        
                        c_PoirsonAndWandell96Replicate(...
                            'spatialFrequency', params.spatialFrequency, ...
                            'meanLuminance', params.meanLuminance, ...
                            'nTrainingSamples', nTrainingSamples, ...
                            'emPathType', emPathType, ...
                            'freezeNoise', freezeNoise, ...
                            'computeResponses', false, ...
                            'visualizeResponses', false, ...
                            'findPerformance', findPerformances, ...
                            'visualizePerformance', visualizePerformances, ...
                            'performanceSignal', performanceSignalName, ...
                            'performanceClassifier', classifierTypeName ...
                            );  % findPerformances
                        
                    end % classifierSignalIndex
                end % classifierTypeIndex
            end % if (findPerformances) || (visualizePerformances)
            
        end % stimConditionIndex
    end % emPathTypeIndex
    
    tEnd = clock;
    timeLapsed = etime(tEnd,tBegin);
    fprintf('BATCH JOB: Completed in %.2f hours. \n', timeLapsed/60/60);
end

function [emPathTypesList, stimParamsList, ...
         classifierSignalList, classifierTypeList] = assembleFullConditionsSet()

    % emPathTypes to compute/analyze
    emPathTypesList = {'frozen0', 'frozen', 'random'};
    
    % stimParams to compute/analyze
    stimParamsList = {...
        struct('spatialFrequency', 2, 'meanLuminance', 20) ...
        struct('spatialFrequency', 2, 'meanLuminance', 200) ...
        struct('spatialFrequency', 10, 'meanLuminance', 200) ...
    };

    % performance params to examine
    classifierSignalList = {'isomerizations', 'photocurrents'};
    classifierTypeList = {'mlpt', 'svm'};
end


% Method to assess performance as a function of the included response duration
function findPerformancesForDifferentEvidenceIntegrationTimes(...
    spatialFrequency, meanLuminance, nTrainingSamples, ...
    emPathType, classifier, performanceSignal, ...
    evidenceIntegrationTimes)

    for k = 1:numel(evidenceIntegrationTimes)
        evidenceIntegrationTime = evidenceIntegrationTimes(k);
        fprintf(2, 'Finding performance for ''%s'' EMpaths using an %s classifier operating on %2.1f milliseconds of the %s signals.\n', emPathType, classifier, evidenceIntegrationTime, performanceSignal);
        c_PoirsonAndWandell96Replicate(...
                'spatialFrequency', spatialFrequency, ...
                'meanLuminance', meanLuminance, ...
                'nTrainingSamples', nTrainingSamples, ...
                'computeResponses', false, ...
                'emPathType', emPathType, ...
                'visualizeResponses', false, ...
                'findPerformance', true, ...
                'performanceSignal', performanceSignal, ...
                'performanceClassifier', classifier, ...
                'performanceEvidenceIntegrationTime', evidenceIntegrationTime ....
                );
    end % k
    
    % And the the full time course
    c_PoirsonAndWandell96Replicate(...
                'spatialFrequency', spatialFrequency, ...
                'meanLuminance', meanLuminance, ...
                'nTrainingSamples', nTrainingSamples, ...
                'computeResponses', false, ...
                'emPathType', emPathType, ...
                'visualizeResponses', false, ...
                'findPerformance', true, ...
                'performanceSignal', performanceSignal, ...
                'performanceClassifier', classifier, ...
                'performanceEvidenceIntegrationTime', [] ....
                );       
end
